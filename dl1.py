# -*- coding: utf-8 -*-
"""DL1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_M-PZZD0MRbewdPKBSgRTRkIC5QcTUzK

# ARTIFICIAL NEURAL NETWORK (ANN) BASICS

## Importing Libraries
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
# sns.set()

"""==========

## Predicting Cars Purchasing | ANNs Basics (Regression Case-study)

Data Source: https://www.kaggle.com/datasets/dev0914sharma/car-purchasing-model

## Data Importing & Inspecting
"""

cars = pd.read_csv('/content/car_purchasing_data.csv', encoding='ISO-8859-1')
cars

cars.info()

cars.describe().round(2)

cars.head()

"""## Data Exploration"""

sns.pairplot(cars)

"""## Data Preprocessing

##### Selecting Data
"""

X = cars.drop(['Customer Name', 'Customer e-mail', 'Country', 'Car Purchase Amount'], axis = 1)
X

y = cars['Car Purchase Amount']
y

"""##### Scaling Data"""

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)
X_scaled

y_scaled = scaler.fit_transform(y.values.reshape(-1,1))
y_scaled

"""##### Splitting Data"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_scaled, test_size = 0.25)

X_train.shape

X_test.shape

"""## Machine Learning Model

##### Model Training
"""

from sklearn.linear_model import LinearRegression

reg = LinearRegression()
reg.fit(X_train, y_train)

reg.coef_

reg.intercept_

"""##### Model Evaluation"""

reg.predict([[1, 50, 50000, 10985, 629312]])

y_pred = reg.predict(X_test)
y_pred

y_test

from sklearn.metrics import r2_score

r2_score(y_test, y_pred)

from sklearn.metrics import mean_squared_error

print(mean_squared_error(y_test, y_pred))

print(np.sqrt(mean_squared_error(y_test, y_pred)))

"""## Artificial Neural Network (ANN) Model

TensorFlow Playground: https://playground.tensorflow.org/

##### Model Training
"""

# !pip install tensorflow

import tensorflow.keras
from keras.models import Sequential
from keras.layers import Dense

ann = Sequential()
ann.add(Dense(25, input_dim=5, activation='relu'))
ann.add(Dense(25, activation='relu'))
ann.add(Dense(1, activation='linear'))
ann.summary()

ann.compile(optimizer='adam', loss='mean_squared_error')

epochs_hist = ann.fit(X_train, y_train, epochs=20, batch_size=25,  verbose=1, validation_split=0.2)

"""##### Model Evaluation"""

print(epochs_hist.history.keys())

plt.plot(epochs_hist.history['loss'])
plt.plot(epochs_hist.history['val_loss'])

plt.title('Model Loss Progression During Training/Validation')
plt.ylabel('Training and Validation Losses')
plt.xlabel('Epoch Number')
plt.legend(['Training Loss', 'Validation Loss'])

ann.predict(np.array([[1, 50, 50000, 10985, 629312]]))

y_pred = ann.predict(X_test)
y_pred

y_test

from sklearn.metrics import r2_score

r2_score(y_test, y_pred)

from sklearn.metrics import mean_squared_error

print(mean_squared_error(y_test, y_pred))

print(np.sqrt(mean_squared_error(y_test, y_pred)))

"""==========

# THANK YOU!
"""